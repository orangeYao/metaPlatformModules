q()
eigenstrat<-function(geno,maxMis=0,minMaf=0.01){
## geno: snp x ind matrix of genotypes \in 0,1,2
##maxMis maximum allowed missing genotypes for a site
nMis <- rowSums(is.na(geno))
freq <- rowMeans(geno,na.rm=T)/2               # get allele frequency
keep <- freq>minMaf&freq<(1-minMaf) & nMis<=maxMis         # remove sites with non-polymorphic data
freq<-freq[keep]
geno<-geno[keep,]
snp<-nrow(geno)                           #number of snps used in analysis
ind<-ncol(geno)                           #number of individuals used in analuysis
M <- (geno-freq*2)/sqrt(freq*(1-freq))       #normalize the genotype matrix
M[is.na(M)]<-0
X<-t(M)%*%M                               #get the (almost) covariance matrix
X<-X/(sum(diag(X))/(snp-1))
E<-eigen(X)
mu<-(sqrt(snp-1)+sqrt(ind))^2/snp         #for testing significance (assuming no LD!)
sigma<-(sqrt(snp-1)+sqrt(ind))/snp*(1/sqrt(snp-1)+1/sqrt(ind))^(1/3)
E$TW<-(E$values[1]*ind/sum(E$values)-mu)/sigma
E$mu<-mu
E$sigma<-sigma
E$nSNP <- nrow(geno)
E$nInd <- ncol(geno)
class(E)<-"eigenstrat"
E
}
ind<-c(100,100,100)
snp<-10000
ind
snp
freq<-cbind(runif(snp),runif(snp),runif(snp))
freq
l<-lapply(1:length(ind),function(x) matrix(rbinom(snp*ind[x],2,freq[,x]),snp))
l
geno<-do.call(cbind,l
)
geno
e<-eigenstrat(geno)
plot(e,col=rep(1:length(ind),ind),xlab="PC1",ylab="PC2")
plot(e,col=rep(1:length(ind),ind),xlab="PC1",ylab="PC2")
ind<-c(20,20)
snp<-10000
freq=c(0.2,0.25)
geno<-c()
for(pop in 1:length(ind))
geno<-rbind(geno,matrix(rbinom(snp*ind[pop],2,freq[pop]),ind[pop]))
geno<-t(geno)
e<-eigenstrat(geno)
plot(e,col=rep(1:length(ind),ind),xlab="PC1",ylab="PC2")
e
plot(e,col=rep(1:length(ind),ind),xlab="PC1",ylab="PC2")
plot(e,col=rep(1:length(ind),ind),xlab="PC1",ylab="PC2")
ind<-c(20,20)
ind
freq=c(0.2,0.25)
geno<-c()
for(pop in 1:length(ind))
geno<-rbind(geno,matrix(rbinom(snp*ind[pop],2,freq[pop]),ind[pop]))
dim(geno)
geno
geno<-t(geno)
geno
dim(geno)
nMis<-rowSums(is.na(geno))
nMis
dim(nMis)
data(array)
library(YuGene)
data(array)
testArray <- data(array)
testArray
testArray = data(array)
testArray
print data(array)
array
array$data
class(array$data)
dim(array$data)
rownames(array$data)
colnames(array$data)
YuGene.data=t(YuGene(t(array$data.all)))
YuGene.data=t(YuGene(t(array$data.all)))
YuGene.data
dim(YuGene.data)
res.pca.yugene.center = pca(YuGene.data, ncomp = 3, scale = TRUE,
center = TRUE, study = array$experiment.all)
pca
res.pca.yugene.center = pca(YuGene.data, ncomp = 3, scale = TRUE,
center = TRUE, study = array$experiment.all)
res.pca.yugene.center = pca(YuGene.data, ncomp = 3, scale = TRUE,
center = TRUE, study = array$experiment.all)
res.pca.yugene.center
res.pca.yugene.center
expl.var = round(res.pca.yugene.center$sdev/sum(res.pca.yugene.center$sdev),4)*100
expl.var
plot(res.pca.yugene.center$x[,1],res.pca.yugene.center$x[,2],
pch = as.numeric(array$experiment.all),
col = as.numeric(array$type.all)+1, lwd = 2,
cex = 1.5, cex.lab = 1.5,xlab=paste("PC1:",expl.var[1],"%"),
ylab=paste("PC2:",expl.var[2],"%"))
title(paste('YuGene multi group data'), cex.main = 1.5)
res.pca.yugene = pca(YuGene.data, ncomp = 3, scale = TRUE, center = TRUE)
expl.var = round(res.pca.yugene$sdev/sum(res.pca.yugene$sdev),4)*100
plot(res.pca.yugene$x[,1],res.pca.yugene$x[,2],
pch = as.numeric(array$experiment.all),
col = as.numeric(array$type.all)+1, lwd = 2,
cex = 1.5, cex.lab = 1.5,X.label=paste("PC1:",expl.var[1],"%"),
Y.label=paste("PC2:",expl.var[1],"%"))
title(paste('YuGene data'), cex.main = 1.5)
opar <- par()      # make a copy of current settings
par(mfrow=c(1,2))
plot(density(ascorbate$gene[,1]),main= Expression values , xlab= log2 expr. );
opar <- par()      # make a copy of current settings
par(mfrow=c(1,2))
plot(density(ascorbate$gene[,1]),main= Expression values , xlab= log2 expr. );
data(ascorbate) # gene expression data available in YuGene package
# apply the transform to the data
YuGene.transformed <- YuGene(ascorbate$gene)
opar <- par()      # make a copy of current settings
par(mfrow=c(1,2))
plot(density(ascorbate$gene[,1]),main= Expression values , xlab= log2 expr. );
plot(density(YuGene.transformed[,1]),main= YuGene values ,xlab= YuGene value );
plot(density(ascorbate$gene[,1]),main= Expression values , xlab= log2 expr. );
plot(density(YuGene.transformed[,1]),main= YuGene values ,xlab= YuGene value );
library(sva)
library(dendextend)
options(stringsAsFactors=F)
cleanY = function(y, mod, svs) {
X = cbind(mod, svs)
Hat = solve(t(X) %*% X) %*% t(X)
beta = (Hat %*% t(y))
rm(Hat)
gc()
P = ncol(mod)
return(y - t(as.matrix(X[,-c(1:P)]) %*% beta[-c(1:P),]))
}
setwd("~/Desktop/summerLee/MetaNetwork/methods/Upload/batch")
edata <- read.csv("f_to_f.csv", row.names=1,header=T)
edata <- as.matrix(edata)
edata
sample_info <- read.table(file="pepper.info" ,header=T)
sample_info
sample_info <- sample_info[ order(row.names(sample_info)), ,drop=FALSE]
sample_info
colnames(edata)
mod = model.matrix(~as.factor(color), data=sample_info)
mod0 = model.matrix(~1,data=sample_info)
mod
mod0
sample_info
sample_info <- read.table(file="pepper.info" ,header=T)
mod = model.matrix(~as.factor(color), data=sample_info)
mod0 = model.matrix(~1,data=sample_info)
mod
n.sv = num.sv(edata,mod,method="leek")
n.sv
sample_info
colnames(sample_info)
mod = model.matrix(~as.factor(colnames(sample_info)), data=sample_info)
colnames(sample_info)
mod = model.matrix(~as.factor("color"), data=sample_info)
mod = model.matrix(~as.factor(color), data=sample_info)
mod = model.matrix(~as.factor('color'), data=sample_info)
mod = model.matrix(~as.factor(colr), data=sample_info)
x=as.name("string")
x
getVar <- apply(edata,1,var)
getVar
mod = model.matrix(~as.factor(as.name(colnames(sample_info))), data=sample_info)
as.name(colnames(sample_info))
color
a = as.name(colnames(sample_info))
a
mod = model.matrix(~as.factor(a), data=sample_info)
a <- 3
type(a)
class(a)
c("color")
c
a = c("color")
a
mod = model.matrix(~as.factor(a), data=sample_info)
mod = model.matrix() data=sample_info)
mod = model.matrix(data=sample_info)
~as.factor(color)
~as.factor(color)
~as.factor(a)
mod = model.matrix(~as.factor(colnames(sample_info)), data=sample_info)
colnames(sample_info)
na.omit(colnames(sample_info))
na.omit(colnames(sample_info))
a <- factor(colnames(sample_info))
a
mod = model.matrix(~as.factor(a), data=sample_info)
a
a
mod = model.matrix(~as.factor(factor(colnames(sample_info))), data=sample_info)
mod = model.matrix(~as.factor(na.omit(colnames(sample_info))), data=sample_info)
set.seed(1)
Age <- sample(seq(18, 60), 50, replace = TRUE)
Male <- sample(c(0,1), 50, replace = TRUE)
Race <- sample(c(1,2,3,4,5), 50, replace = TRUE)
Outcome <- sample(seq(0,5), 50, replace = TRUE)
Race
Race <- as.factor(Race)
Race
Race <- as.factor("Race")
Race
Race
mod = model.matrix(~as.factor(factor(colnames(sample_info))), data=sample_info)
model.matrix(~as.factor(colot), data=sample_info)
model.matrix(~as.factor(color), data=sample_info)
model.matrix(~as.factor(a=color), data=sample_info)
model.matrix(~as.factor(olor), data=sample_info)
a = color
m = hehe
m <- hehe
dd <- data.frame(a = gl(3,4), b = gl(4,1,12)) # balanced 2-way
options("contrasts")
dd
model.matrix(~ a + b, dd)
a = "haha"
a
model.matrix(~ a + b, dd)
model.matrix(~ a + 'b', dd)
model.matrix(~ 'b', dd)
model.matrix(~ b, dd)
get("%o%")
sample_info <- read.table(file=infoFileName, header=T)
dataFileName = "f_to_f.csv"
infoFileName = "pepper.info"
sample_info <- read.table(file=infoFileName, header=T)
sample_info
sample_info$color
attributes(sample_info)
attributes$names
assign("hehe", "color")
hehe
assign("hehe", hehe)
hehe
mod = model.matrix(~as.factor(hehe), data=sample_info)
varname <- c("a", "b", "d")
varname
get(varname[1])
get(varname[2])
assign(varname[1], 2 + 2)
haha
a
get(varname[1])
varname[1]
varname <- c("color")
get(varname[1])
model.matrix(~as.factor(get(varname[1])), data=sample_info)
varname <- c(colnames(sample_info))
mod = model.matrix(~as.factor(get(varname[1])), data=sample_info)
mod
dim(edata)
getVar <- apply(edata,1,var)
param <- 1
data_removeNoVariance <- edata[getVar > param& !is.na(getVar),]
dim(edata)
dim(edata)
n.sv = num.sv(edata,mod,method="leek")
n.sv
svobj = sva(edata,mod,mod0,n.sv=n.sv-1)
sample_info
n_occur <- data.frame(table(sample_info$color))
n_ovvur
n_occur
n_occur$Var1
class(n_occur)
n_occur[:,1]
n_occur[,1]
n_occur[1,1]
class(n_occur[1,1])
n_occur <- lappy(data.frame(table(sample_info$color)), as.character)
n_occur <- lapply(data.frame(table(sample_info$color)), as.character)
n_occur[1,1]
n_occur
class(n_occur)
n_occur[1]
n_occur[1][1]
n_occur[1][2]
n_occur[1]
class(n_occur[1])
n_occur[1][1]
(n_occur[1])[1]
n_occur <- data.frame(table(sample_info$color))
lapply(n_occur, as.character)
n_occur
lapply(n_occur[1], as.character)
lapply(n_occur[1,1], as.character)
a = lapply(n_occur[1,1], as.character)
a
a + "hehe"
toString(n_occur[1,1])
toString(n_occur[1,2])
toString(n_occur[2,2])
dim(n_occur)
dim(n_occur)[1]
dim(n_occur)[2]
dim(n_occur)[3]
n_occur
data.frame(table(sample_info$color)
)
)
data.frame(table(sample_info$color))
sample_info$color
sample_info[,1]
factorName <- c(colnames(sample_info))
factor <- get(factorName[1])
factorName
get(factorName[1])
factor = get(factorName[1])
print 3
puts 3
a = 4
print a
put a
print(a)
newEdata <- cleanY(edata,mod,svobj$sv)
n_occur <- data.frame(table(sample_info$get(factorName[1])))
data.frame(table(sample_info$get(factorName[1])))
get(factorName[1])
sample_info$get(factorName[1])
sample_info$factor
sample_info
sample_info$color
get(factorName[1])
sample_info$get(factorName[1])
n_occur <- data.frame(table(sample_info[1]))
n_occur
